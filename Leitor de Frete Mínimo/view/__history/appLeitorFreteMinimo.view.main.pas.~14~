unit appLeitorFreteMinimo.view.main;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Vcl.StdCtrls, Vcl.Buttons,
  IdBaseComponent, IdComponent, IdTCPConnection, IdTCPClient, IdHTTP,
  IdIOHandler, IdIOHandlerSocket, IdIOHandlerStack, IdSSL, IdSSLOpenSSL,
  Data.DB, Vcl.Grids, Vcl.DBGrids, Vcl.ComCtrls, Datasnap.DBClient;

type
  TFormMain = class(TForm)
    IdHTTP1: TIdHTTP;
    IdSSLIOHandlerSocketOpenSSL1: TIdSSLIOHandlerSocketOpenSSL;
    Label1: TLabel;
    pgcTabelas: TPageControl;
    TabSheet1: TTabSheet;
    TabSheet2: TTabSheet;
    TabSheet3: TTabSheet;
    TabSheet4: TTabSheet;
    dbgLista: TDBGrid;
    EditURL: TEdit;
    lblTitulo: TLabel;
    cdsTemp: TClientDataSet;
    dsTemp: TDataSource;
    cdsTempTipodeCarga: TStringField;
    cdsTempCoeficientedeCusto: TStringField;
    cdsTempUnidade: TStringField;
    cdsTempeixos_2: TStringField;
    cdsTempeixos_3: TStringField;
    cdsTempeixos_4: TStringField;
    cdsTempeixos_5: TStringField;
    cdsTempeixos_6: TStringField;
    cdsTempeixos_7: TStringField;
    cdsTempeixos_9: TStringField;
    Memo1: TMemo;
    Memo2: TMemo;
    pnlRodape: TPanel;
    btnLerHTML: TBitBtn;
    BitBtn2: TBitBtn;
    BitBtn3: TBitBtn;
    pnlCabecalho: TPanel;
    pnlConteudo: TPanel;
    Label2: TLabel;

    { Procedures }
    procedure GeraHTML();
    procedure LerArquivo;
    procedure InserirConteudo(IndiceColuna: Integer; Conteudo: String);
    procedure ImportarDadosHTML;

    { Functions }
    function ExtractText(aText, OpenTag, CloseTag: String): String;
    function GetNomeArquivoSelecionado(DirIntial: String;
      const Filter: String): String;
    function CarregarArquivo: Boolean;
    function VerificarRegistroInserido(IndiceColuna: Integer;
      Conteudo: String): Boolean;
    function GravarRegistro: Boolean;
    procedure ButtonLerHTMLClick(Sender: TObject);
    procedure btnLerHTMLClick(Sender: TObject);

  private

    { Private declarations }
  public
    { Public declarations }
  end;

var
  FormMain: TFormMain;
  IdHTTP1: TIdHTTP;
  ArquivoHTML: TextFile;

implementation

{$R *.dfm}

{ Função principal }
procedure TFormMain.LerArquivo;
var
  ColunaCorrente, ContaRegistro, oInicio, oFinal: Integer;
  Linha, LinhaUpper, Conteudo: String;
  LinhaDuplicada: Boolean;
begin
  // Faz a leitura e armazenamento das informações.
  ColunaCorrente := 0;
  ContaRegistro := 0;
  Reset(ArquivoHTML);

  while not Eof(ArquivoHTML) do
  begin
    Readln(ArquivoHTML, Linha);
    LinhaUpper := UpperCase(Linha);

    // Verifica a Tag TD (início e oFinal da célula) para extrair o conteúdo.
    if Pos('<TD', LinhaUpper) > 0 then
    begin
      // Até o total de registros que devem ser inseridos. No caso são 10.
      if ColunaCorrente <= (10 - 1) then
      begin
        oInicio := Pos(' >', LinhaUpper) + 2;
        oFinal := Pos('</P>', LinhaUpper);

        Conteudo := Copy(Linha, oInicio, oFinal - oInicio);

        // A cada nova linha verifica se o Cod. Barra já existe.
        if (ColunaCorrente = 0) then
          LinhaDuplicada := VerificarRegistroInserido(ColunaCorrente, Conteudo);

        // Insere o registro apenas se não existe ainda na tabela.
        if not(LinhaDuplicada) then
          InserirConteudo(ColunaCorrente, Conteudo);

        // Incrementa o índice da coluna
        Inc(ColunaCorrente);
      end;
    end;

    // Verifica a Tag TR (oFinal da linha) para gravar o registro.
    if Pos('</TR>', LinhaUpper) > 0 then
    begin
      if GravarRegistro then
        Inc(ContaRegistro);
      ColunaCorrente := 0;
    end;

    // Verifica a Tag TABLE (oFinal da tabela) para finalizar a leitura.
    if Pos('</TABLE>', LinhaUpper) > 0 then
      Break;
  end;
  ShowMessage(Format('Foram inseridos [ %d ] novos registros.',
    [ContaRegistro]));
end;

procedure TFormMain.btnLerHTMLClick(Sender: TObject);
begin
  GeraHTML;
  // Faz a chamada do método principal de importação.
  ImportarDadosHTML;
end;

procedure TFormMain.ButtonLerHTMLClick(Sender: TObject);
begin
  // Gera o HTML da página
  GeraHTML;
  // Faz a chamada do método principal de importação.
  ImportarDadosHTML;
end;

function TFormMain.CarregarArquivo: Boolean;
var
  NomeArquivo, DirInicial, Filtro: String;
begin
  // Retorna False caso haja falha ao carregar arquivo e True caso tenha sucesso.
  Result := True;
  DirInicial := ExtractFilePath(ParamStr(0));
  Filtro := 'Arquivos HTML|*.htm*|Todos os Arquivos|*.*';
  NomeArquivo := GetNomeArquivoSelecionado(DirInicial, Filtro);
  if not FileExists(NomeArquivo) then
  begin
    Result := False;
    ShowMessage('Arquivo inválido ou nenhum arquivo informado.');
    Exit;
  end;
  AssignFile(ArquivoHTML, NomeArquivo);
end;

// Funcão secundária
procedure TFormMain.GeraHTML;
var
  Pagina, Lista: String;
  ArquivoHTML: TStrings;
  op: Boolean;
  i: Integer;
  totalLinhas: Integer;
  contador: Integer;
begin
  op := False;

  // Salva o o código fonte em HTML da página
  Pagina := IdHTTP1.Get(EditURL.Text);

  // Filtra o HTML
  Memo1.Lines.Clear;
  Memo1.Lines.Text := Pagina;
  Memo2.Lines.Clear;

  for i := 0 to Memo1.Lines.Count - 1 do
  begin
    // Se for início ou final de uma tabela
    if Pos('<table class="dou-table"', Memo1.Lines.Strings[i]) > 0 then
      op := True
    else if Pos('</table>', Memo1.Lines.Strings[i]) > 0 then
      op := False;

    // Gravar no arquivo final
    if (op = True) then
    begin
      // exclui as 3 primeiras tags <tr>
      if (Pos('<tr>', Memo1.Lines.Strings[i]) > 0) and (contador < 4) then
        contador := contador + 1;

      if contador > 3 then
        Memo2.Lines.Add(Memo1.Lines.Strings[i])
    end;
  end;

  // Corta o texto até a partir da tabela até o final
  //Lista := Copy(Pagina, Pos('<table class="dou-table"', Pagina), Length(Pagina));
  //Lista := Copy(Lista, 1, Pos('</table>', Lista) + Length('</table>') - 1);

  //ArquivoHTML.Text := Lista;
  ArquivoHTML := TStringList.Create;
  ArquivoHTML.Append(Memo2.Lines.Text);
  ArquivoHTML.SaveToFile('C:\Users\Bsoft\Documents\temp2.html');
  ArquivoHTML.Free;
end;

function TFormMain.GetNomeArquivoSelecionado(DirIntial: String;
  const Filter: String): String;
var
  D: TOpenDialog;
begin
  // Retorna uma String o nome completo do arquivo selecionado.
  D := TOpenDialog.Create(Nil);
  D.InitialDir := DirIntial;
  D.Filter := Filter;
  D.Execute;
  Result := D.FileName;
  D.Free;
end;

function TFormMain.GravarRegistro: Boolean;
begin
  // Grava as informações inseridas.
  Result := cdsTemp.State = dsInsert;
  if cdsTemp.State = dsInsert then
    cdsTemp.Post;
end;

procedure TFormMain.ImportarDadosHTML;
begin
  // Procedimento principal, o qual agrupa todas as operações de
  // leitura e processamento e gravação dos dados da tabela HTML.
  // Carrega o Arquivo. Caso haja falha, aborta o processo.
  if not CarregarArquivo then
    Exit;
  cdsTemp.DisableControls;
  // faz a leitura e importação dos dados.
  LerArquivo;
  cdsTemp.EnableControls;
  cdsTemp.First;
  // Fecha o arquivo.
  CloseFile(ArquivoHTML);
end;

procedure TFormMain.InserirConteudo(IndiceColuna: Integer; Conteudo: String);
begin
  // Insere os dados na tabela temporária.
  // Lembrando que a ordem dos campos deve ser a mesma das colunas no HTML.
  if cdsTemp.State <> dsInsert then
    cdsTemp.Append;
  cdsTemp.Fields[IndiceColuna].AsString := Conteudo;
end;

function TFormMain.VerificarRegistroInserido(IndiceColuna: Integer;
  Conteudo: String): Boolean;
var
  NomeCampo: String;
begin
  // Retorna True caso o registro já tenha sido inserido.
  NomeCampo := cdsTemp.Fields[IndiceColuna].FieldName;
  Result := cdsTemp.Locate(NomeCampo, Conteudo, [loCaseInsensitive]);
end;

function TFormMain.ExtractText(aText, OpenTag, CloseTag: String): String;
{ Retorna o texto dentro de 2 tags (open & close Tag's) }
var
  iAux, kAux: Integer;
begin
  Result := '';

  if (Pos(CloseTag, aText) <> 0) and (Pos(OpenTag, aText) <> 0) then
  begin
    iAux := Pos(OpenTag, aText) + Length(OpenTag);
    kAux := Pos(CloseTag, aText);
    Result := Copy(aText, iAux, kAux - iAux);
  end;
end;

end.
